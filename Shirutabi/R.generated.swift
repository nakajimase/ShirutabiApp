//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `ContentsListCell`.
    static let contentsListCell = _R.nib._ContentsListCell()
    /// Nib `FavoriteTabCell`.
    static let favoriteTabCell = _R.nib._FavoriteTabCell()
    /// Nib `ProfileHeaderCell`.
    static let profileHeaderCell = _R.nib._ProfileHeaderCell()
    /// Nib `TopBannerCell`.
    static let topBannerCell = _R.nib._TopBannerCell()
    
    /// `UINib(name: "ContentsListCell", in: bundle)`
    static func contentsListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentsListCell)
    }
    
    /// `UINib(name: "FavoriteTabCell", in: bundle)`
    static func favoriteTabCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoriteTabCell)
    }
    
    /// `UINib(name: "ProfileHeaderCell", in: bundle)`
    static func profileHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileHeaderCell)
    }
    
    /// `UINib(name: "TopBannerCell", in: bundle)`
    static func topBannerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topBannerCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContentsListCell`.
    static let contentsListCell: Rswift.ReuseIdentifier<ContentsListCell> = Rswift.ReuseIdentifier(identifier: "ContentsListCell")
    /// Reuse identifier `FavoriteTabCell`.
    static let favoriteTabCell: Rswift.ReuseIdentifier<FavoriteTabCell> = Rswift.ReuseIdentifier(identifier: "FavoriteTabCell")
    /// Reuse identifier `ProfileHeaderCell`.
    static let profileHeaderCell: Rswift.ReuseIdentifier<ProfileHeaderCell> = Rswift.ReuseIdentifier(identifier: "ProfileHeaderCell")
    /// Reuse identifier `TopBannerCell`.
    static let topBannerCell: Rswift.ReuseIdentifier<TopBannerCell> = Rswift.ReuseIdentifier(identifier: "TopBannerCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `ContentsTopTableViewController`.
    static let contentsTopTableViewController = _R.storyboard.contentsTopTableViewController()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainNavigation`.
    static let mainNavigation = _R.storyboard.mainNavigation()
    /// Storyboard `MainTabBar`.
    static let mainTabBar = _R.storyboard.mainTabBar()
    /// Storyboard `MyPageTableViewController`.
    static let myPageTableViewController = _R.storyboard.myPageTableViewController()
    /// Storyboard `SearchViewController`.
    static let searchViewController = _R.storyboard.searchViewController()
    
    /// `UIStoryboard(name: "ContentsTopTableViewController", bundle: ...)`
    static func contentsTopTableViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.contentsTopTableViewController)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainNavigation", bundle: ...)`
    static func mainNavigation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainNavigation)
    }
    
    /// `UIStoryboard(name: "MainTabBar", bundle: ...)`
    static func mainTabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainTabBar)
    }
    
    /// `UIStoryboard(name: "MyPageTableViewController", bundle: ...)`
    static func myPageTableViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myPageTableViewController)
    }
    
    /// `UIStoryboard(name: "SearchViewController", bundle: ...)`
    static func searchViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _ContentsListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContentsListCell
      
      let bundle = R.hostingBundle
      let identifier = "ContentsListCell"
      let name = "ContentsListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContentsListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentsListCell
      }
      
      fileprivate init() {}
    }
    
    struct _FavoriteTabCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FavoriteTabCell
      
      let bundle = R.hostingBundle
      let identifier = "FavoriteTabCell"
      let name = "FavoriteTabCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FavoriteTabCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoriteTabCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfileHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileHeaderCell"
      let name = "ProfileHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _TopBannerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TopBannerCell
      
      let bundle = R.hostingBundle
      let identifier = "TopBannerCell"
      let name = "TopBannerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TopBannerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopBannerCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct contentsTopTableViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ContentsTopTableViewController
      
      let bundle = R.hostingBundle
      let name = "ContentsTopTableViewController"
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = HomeViewController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct mainNavigation: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainNavigationController
      
      let bundle = R.hostingBundle
      let name = "MainNavigation"
      
      fileprivate init() {}
    }
    
    struct mainTabBar: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MainTabController
      
      let bundle = R.hostingBundle
      let name = "MainTabBar"
      
      fileprivate init() {}
    }
    
    struct myPageTableViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = MyPageTableViewController
      
      let bundle = R.hostingBundle
      let name = "MyPageTableViewController"
      
      fileprivate init() {}
    }
    
    struct searchViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SearchViewController
      
      let bundle = R.hostingBundle
      let name = "SearchViewController"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
